pipeline {
    agent {
        node {
            label 'security-scanner-agent'
        }
    }
    
    parameters {
        string(name: 'REPOSITORY_URL', description: 'Git repository URL to analyze')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to analyze')
        choice(name: 'LANGUAGE', choices: ['auto', 'java', 'python', 'javascript', 'cpp', 'go', 'ruby'], description: 'Programming language to analyze')
        string(name: 'SCAN_PATH', defaultValue: '.', description: 'Path to scan for dependencies')
        choice(name: 'SCAN_TYPE', choices: ['full', 'codeql-only', 'dependency-only'], defaultValue: 'full', description: 'Type of scan to perform')
        string(name: 'CALLBACK_URL', defaultValue: '', description: 'URL to call with results (optional)')
        string(name: 'MESSAGE_ID', defaultValue: '', description: 'SQS message ID (for tracking)')
    }
    
    stages {
        stage('Validate Repository') {
            steps {
                script {
                    // Validate GitHub URL format
                    if (!params.REPOSITORY_URL.matches('^https?://github\\.com/[a-zA-Z0-9_-]+/[a-zA-Z0-9_.-]+/?$')) {
                        error "Invalid GitHub repository URL: ${params.REPOSITORY_URL}"
                    }
                    
                    // Test if repository is accessible
                    try {
                        sh "git ls-remote --heads ${params.REPOSITORY_URL} ${params.BRANCH}"
                    } catch (Exception e) {
                        error "Failed to access repository or branch: ${e.message}"
                    }
                }
            }
        }
        
        stage('Determine Language') {
            when {
                expression { params.LANGUAGE == 'auto' }
            }
            steps {
                script {
                    // Clone repository to detect language
                    sh "git clone --depth 1 --branch ${params.BRANCH} ${params.REPOSITORY_URL} repo-temp"
                    
                    // Detect language based on files
                    def detectedLanguage = 'javascript' // Default
                    
                    if (fileExists('repo-temp/pom.xml') || fileExists('repo-temp/build.gradle')) {
                        detectedLanguage = 'java'
                    } else if (fileExists('repo-temp/requirements.txt') || fileExists('repo-temp/setup.py')) {
                        detectedLanguage = 'python'
                    } else if (fileExists('repo-temp/Cargo.toml')) {
                        detectedLanguage = 'cpp' // Using cpp for Rust as it's closest
                    } else if (fileExists('repo-temp/go.mod')) {
                        detectedLanguage = 'go'
                    } else if (fileExists('repo-temp/Gemfile')) {
                        detectedLanguage = 'ruby'
                    }
                    
                    echo "Detected language: ${detectedLanguage}"
                    env.DETECTED_LANGUAGE = detectedLanguage
                    
                    // Clean up
                    sh "rm -rf repo-temp"
                }
            }
        }
        
        stage('Security Scans') {
            parallel {
                stage('CodeQL Analysis') {
                    when {
                        expression { params.SCAN_TYPE == 'full' || params.SCAN_TYPE == 'codeql-only' }
                    }
                    steps {
                        script {
                            def language = params.LANGUAGE == 'auto' ? env.DETECTED_LANGUAGE : params.LANGUAGE
                            
                            // Skip languages not supported by CodeQL
                            if (language in ['java', 'python', 'javascript', 'cpp', 'go', 'ruby']) {
                                build job: 'codeql-analysis', parameters: [
                                    string(name: 'REPOSITORY_URL', value: params.REPOSITORY_URL),
                                    string(name: 'BRANCH', value: params.BRANCH),
                                    string(name: 'LANGUAGE', value: language)
                                ]
                            } else {
                                echo "Skipping CodeQL for unsupported language: ${language}"
                            }
                        }
                    }
                }
                
                stage('Dependency Check') {
                    when {
                        expression { params.SCAN_TYPE == 'full' || params.SCAN_TYPE == 'dependency-only' }
                    }
                    steps {
                        build job: 'dependency-check', parameters: [
                            string(name: 'REPOSITORY_URL', value: params.REPOSITORY_URL),
                            string(name: 'BRANCH', value: params.BRANCH),
                            string(name: 'SCAN_PATH', value: params.SCAN_PATH)
                        ]
                    }
                }
            }
        }
        
        stage('Send Callback') {
            when {
                expression { params.CALLBACK_URL != '' }
            }
            steps {
                script {
                    def scanId = UUID.randomUUID().toString()
                    def payload = [
                        scan_id: scanId,
                        repository_url: params.REPOSITORY_URL,
                        branch: params.BRANCH,
                        status: 'completed',
                        message_id: params.MESSAGE_ID,
                        completed_at: new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone('UTC'))
                    ]
                    
                    def response = httpRequest(
                        url: params.CALLBACK_URL,
                        httpMode: 'POST',
                        contentType: 'APPLICATION_JSON',
                        requestBody: groovy.json.JsonOutput.toJson(payload)
                    )
                    
                    echo "Callback response: ${response.status}"
                }
            }
        }
    }
    
    post {
        failure {
            script {
                if (params.CALLBACK_URL != '') {
                    def scanId = UUID.randomUUID().toString()
                    def payload = [
                        scan_id: scanId,
                        repository_url: params.REPOSITORY_URL,
                        branch: params.BRANCH,
                        status: 'failed',
                        message_id: params.MESSAGE_ID,
                        error: currentBuild.description ?: 'Unknown error',
                        completed_at: new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone('UTC'))
                    ]
                    
                    httpRequest(
                        url: params.CALLBACK_URL,
                        httpMode: 'POST',
                        contentType: 'APPLICATION_JSON',
                        requestBody: groovy.json.JsonOutput.toJson(payload)
                    )
                }
            }
        }
        always {
            cleanWs()
        }
    }
} 