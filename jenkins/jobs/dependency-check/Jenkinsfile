pipeline {
    agent {
        node {
            label 'security-scanner-agent'  // Updated label
        }
    }
    
    environment {
        DC_HOME = '/usr/share/dependency-check/dependency-check'
    }
    
    parameters {
        string(name: 'REPOSITORY_URL', description: 'Git repository URL to analyze')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to analyze')
        string(name: 'SCAN_PATH', defaultValue: '.', description: 'Path to scan (relative to repository root)')
        string(name: 'SUPPRESSION_FILE', defaultValue: '', description: 'Path to suppression XML file (optional)')
    }
    
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                git branch: params.BRANCH, url: params.REPOSITORY_URL
            }
        }
        
        stage('Dependency Check') {
            steps {
                script {
                    def suppressionOpt = params.SUPPRESSION_FILE ? "--suppression '${params.SUPPRESSION_FILE}'" : ''
                    
                    echo "Starting dependency check. First run may take 10-20 minutes to download NVD database..."
                    timeout(time: 30, unit: 'MINUTES') {  // Increased timeout for first run
                        sh """
                            dependency-check \
                                --scan '${params.SCAN_PATH}' \
                                --format 'HTML' \
                                --format 'JSON' \
                                --format 'SARIF' \
                                --prettyPrint \
                                --failOnCVSS 7 \
                                ${suppressionOpt} \
                                --out '.' \
                                --log 'dependency-check.log'
                        """
                    }
                }
            }
        }
        
        stage('Process Results') {
            steps {
                // Archive the reports
                archiveArtifacts artifacts: 'dependency-check-report.html,dependency-check-report.json,dependency-check-report.sarif,dependency-check.log', fingerprint: true
                
                // Parse SARIF for Jenkins UI
                recordIssues(
                    tool: sarif(pattern: 'dependency-check-report.sarif'),
                    qualityGates: [[threshold: 1, type: 'TOTAL_HIGH', unstable: true]]
                )
                
                // Optional: Publish HTML report
                publishHTML(
                    target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'dependency-check-report.html',
                        reportName: 'Dependency Check Report'
                    ]
                )
            }
        }
        
        stage('Store Results') {
            steps {
                build job: 'store-findings', parameters: [
                    string(name: 'REPOSITORY_URL', value: params.REPOSITORY_URL),
                    string(name: 'BRANCH', value: params.BRANCH),
                    string(name: 'COMMIT_HASH', value: sh(script: 'git rev-parse HEAD', returnStdout: true).trim()),
                    string(name: 'SCAN_TYPE', value: 'dependency_check'),
                    string(name: 'RESULTS_FILE', value: 'dependency-check-report.sarif'),
                    string(name: 'SCAN_PATH', value: params.SCAN_PATH)
                ]
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        failure {
            script {
                if (currentBuild.result == 'FAILURE') {
                    echo "Build failed due to vulnerabilities exceeding CVSS threshold"
                }
            }
        }
    }
} 